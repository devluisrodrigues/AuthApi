{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Criando a imagem para a API","text":"<p>Autor: Lu\u00eds Rodrigues</p> <p>Link para o Reposit\u00f3rio no GitHub: Reposit\u00f3rio</p> <p>Link para o Docker Hub: Docker Hub</p>"},{"location":"#descricao-do-projeto","title":"Descri\u00e7\u00e3o do Projeto:","text":"<p>O projeto consiste em uma API RESTful desenvolvida em Python com o framework FastAPI. A API possui tr\u00eas endpoints, um para registrar um novo usu\u00e1rio, a qual adiciona um novo usu\u00e1rio na base de dados. Outro para autenticar um usu\u00e1rio, no qual checa o email e senha do usu\u00e1rio. E um terceiro para consultar uma API externa. A API utiliza um banco de dados PostgreSQL para armazenar os usu\u00e1rios cadastrados.</p> <p>A API realiza uma consulta, protocolo GET, em uma API externa JokeAPI e retorna uma piada sobre programa\u00e7\u00e3o, no formato, id: int, Pergunta: str, Resposta: str.</p> <p>Exemplo: curl -X GET \"https://official-joke-api.appspot.com/jokes/programming/random\"</p> <pre><code>[\n    {\n        \"id\": 15,\n        \"type\": \"programming\",\n        \"setup\": \"What's the best thing about a Boolean?\",\n        \"punchline\": \"Even if you're wrong, you're only off by a bit.\"\n    }\n]\n</code></pre> <p>O id representa o n\u00famero da piada catalogada pela API.</p> <p>Para realizar uma consulta na API \u00e9 necess\u00e1rio passar um token JWT no cabe\u00e7alho da requisi\u00e7\u00e3o, o token \u00e9 gerado ao registrar ou autenticar um usu\u00e1rio.</p>"},{"location":"#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente:","text":"<ul> <li> <p>Crie um diret\u00f3rio para organizar os arquivos do projeto, por exemplo: <code>mkdir projeto-cloud</code>. E acesse o diret\u00f3rio criado: <code>cd projeto-cloud</code></p> </li> <li> <p>Crie o <code>docker-compose.yml</code> com o seguinte conte\u00fado:</p> </li> </ul> <pre><code>services:\n  fastapi:\n    container_name: fastapi-api\n    image: lasr2/authapi:latest\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n    environment:\n      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}\n      SECRET_KEY: \"${SECRET_KEY:-suaChaveSecreta}\"\n    restart: always\n\n\n  db:\n    image: postgres:17\n    container_name: postgres-database\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-projeto}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n      POSTGRES_DB: ${POSTGRES_DB:-projeto}\n</code></pre> <ul> <li>Crie o arquivo <code>.env</code> com o seguinte conte\u00fado, altere as vari\u00e1veis de acordo com o seu ambiente:</li> </ul> <pre><code>SECRET_KEY =\"chave_secreta_muito_forte\"\nPOSTGRES_DB=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=admin\n</code></pre> <ul> <li> <p>Abra o terminal e execute o comando <code>docker-compose up -d</code> para subir os containers</p> <p>Caso esteja funcionando corretamente, o terminal exibir\u00e1, no final, a mensagem:</p> </li> </ul> <pre><code>fastapi-api        | INFO:     Started server process [1]\nfastapi-api        | INFO:     Waiting for application startup.\nfastapi-api        | INFO:     Application startup complete.\nfastapi-api        | INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)\n</code></pre> <ul> <li>Tente acessar o endere\u00e7o <code>http://localhost:8080/docs</code> para verificar se a API est\u00e1 funcionando.</li> </ul> <p>Nota Importante: Perceba que ao utilizar o docker-compose acima, ao utilizar o m\u00e9todo docker compose up, o docker ir\u00e1 baixar a imagem do reposit\u00f3rio do Docker Hub.</p> <p>Para utilizar novamente: Depois que o ambiente estiver configurados, basta entrar na pasta do projeto e executar o comando <code>docker-compose up -d</code> para subir os containers.</p>"},{"location":"#endpoints-da-api","title":"Endpoints da API:","text":"<ul> <li> <p>Post /registrar </p> <ul> <li>Cria um novo usu\u00e1rio</li> <li>Par\u00e2metros:<ul> <li><code>email</code>: E-mail do usu\u00e1rio</li> <li><code>nome</code>: Nome do usu\u00e1rio</li> <li><code>senha</code>: Senha do usu\u00e1rio</li> </ul> </li> <li>Retorno:<ul> <li><code>200</code>: Usu\u00e1rio criado com sucesso, retorna no body da resposta um token JWT  <code>json {     \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTJAZ21haWwiLCJub21lIjoiaHVtYmFzIiwiZXhwIjoxNzI5NzkzNDUzfQ.eKOBfLTVtSZ4wNKjAJ9XugFH8yBZACIlXH2Bvsvt8rY\" }</code></li> <li><code>409</code>: E-mail j\u00e1 cadastrado</li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X POST \"http://localhost:8080/registrar\"  -H \"Content-Type: application/json\"  -d '{\"email\": \"teste2@gmail\", \"senha\": \"123\",\"nome\":\"humbas\"}'</code></p> </li> </ul> </li> <li> <p>Post /login </p> <ul> <li>Autentica um usu\u00e1rio, recebe um e-mail e senha e retorna um token JWT</li> <li>Par\u00e2metros:<ul> <li><code>email</code>: E-mail do usu\u00e1rio</li> <li><code>senha</code>: Senha do usu\u00e1rio</li> </ul> </li> <li> <p>Retorno:</p> <ul> <li><code>200</code>: Usu\u00e1rio autenticado com sucesso, retorna no body da resposta um token JWT  <code>json {     \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTJAZ21haWwiLCJub21lIjoiaHVtYmFzIiwiZXhwIjoxNzI5NzkzNDUzfQ.eKOBfLTVtSZ4wNKjAJ9XugFH8yBZACIlXH2Bvsvt8rY\" }</code></li> <li><code>401</code>: Se o E-mail n\u00e3o estiver cadastrado ou a senha estiver incorreta</li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X POST \"http://localhost:8080/login\" -H \"Content-Type: application/json\" -d '{\"email\": \"teste@gmail\", \"senha\": \"123\"}'</code></p> </li> </ul> </li> <li> <p>Get /consultar </p> <ul> <li>Faz uma consulta em uma API externa, precisa de um token JWT para autentica\u00e7\u00e3o</li> <li>Cabe\u00e7alho:<ul> <li><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTNAZ21haWwiLCJub21lIjoiY2FydXNvIiwiZXhwIjoxNzI5ODAyMjgwfQ.ByDfIOOplaGl9akfW2kmk0uQZuXG2f-697pcN5c5-lY</code></li> </ul> </li> <li> <p>Retorno:</p> <ul> <li> <p><code>200</code>: Retorna um JSON com uma pergunta e resposta <code>json {     \"id\": 15,     \"Pergunta\": \"What's the best thing about a Boolean?\",     \"Resposta\": \"Even if you're wrong, you're only off by a bit.\" }</code></p> </li> <li> <p><code>403</code>: Token inv\u00e1lido ou expirado</p> </li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X GET \"http://localhost:8080/consultar\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTNAZ21haWwiLCJub21lIjoiY2FydXNvIiwiZXhwIjoxNzI5ODAyMjgwfQ.ByDfIOOplaGl9akfW2kmk0uQZuXG2f-697pcN5c5-lY\"</code></p> </li> </ul> </li> </ul> <p>Nota Importante: \u00c9 poss\u00edvel visualizar as informa\u00e7\u00f5es do JWT contidas em jwt.io</p>"},{"location":"#video-de-demonstracao","title":"V\u00eddeo de Demonstra\u00e7\u00e3o:","text":"<p>Link para o v\u00eddeo de demonstra\u00e7\u00e3o: V\u00eddeo</p>"},{"location":"aws/","title":"Subindo a aplica\u00e7\u00e3o no AWS Elastic Kubernetes Service (EKS)","text":""},{"location":"aws/#links","title":"Links:","text":"<p>Link do v\u00eddeo no Youtube: V\u00eddeo de documenta\u00e7\u00e3o do deploy na AWS</p> <p>Link para o Reposit\u00f3rio no GitHub: Reposit\u00f3rio</p> <p>Para subir a aplica\u00e7\u00e3o no AWS EKS atrav\u00e9s do m\u00e9todo abaixo, \u00e9 necess\u00e1rio ter uma conta na AWS e ter o <code>aws-cli</code> instalado e configurado.</p>"},{"location":"aws/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente:","text":"<ul> <li> <p>Crie um diret\u00f3rio para organizar os arquivos do projeto, por exemplo: <code>mkdir projeto-cloud</code>. E acesse o diret\u00f3rio criado: <code>cd projeto-cloud</code></p> </li> <li> <p>Crie o cluster EKS com o comando:</p> </li> </ul> <pre><code>eksctl create cluster --name projeto-cluster-fastapi --region us-east-2 --nodes 2 --node-type t3.small\n</code></pre> <p>Nota: Por experi\u00eancia pr\u00f3pria, verifique os pre\u00e7os de cada regi\u00e3o antes de criar o cluster, https://cloudprice.net/aws/regions. Nota do aluno que subiu o cluster em S\u00e3o Paulo (sa-east-1) e est\u00e1 refazendo o projeto para Ohio (us-east-2), pois ficou assustado com o pre\u00e7o.</p> <p>O comando acima cria um cluster EKS com o nome <code>projeto-cluster-fastapi</code> na regi\u00e3o <code>us-east-2</code> com 2 nodes com tamanho t3.small com uma VPC e subnets default.</p> <p>Os nodes s\u00e3o inst\u00e2ncias EC2, que ir\u00e3o executar os containers da aplica\u00e7\u00e3o.</p> <p>Nota: Foram utilizadas m\u00e1quinas t3.small por quest\u00f5es de custo e desempenho, para o projeto em quest\u00e3o, essas m\u00e1quinas s\u00e3o suficientes. Por\u00e9m, \u00e9 poss\u00edvel utilizar m\u00e1quinas com mais recursos.</p> <p>Nota: O EKS apresenta uma vantagem de escalabilidade, ou seja, \u00e9 poss\u00edvel aumentar ou diminuir a quantidade de nodes conforme a necessidade, evitando gargalos na aplica\u00e7\u00e3o.</p> <p>Espere a cria\u00e7\u00e3o do cluster, pode demorar alguns minutos.</p> <p>Ap\u00f3s criar o cluster, execute o comando abaixo para configurar o <code>kubectl</code> para configurar o acesso ao cluster pelo CLI:</p> <pre><code>aws eks --region us-east-2 update-kubeconfig --name projeto-cluster-fastapi\n</code></pre> <p>Agora o <code>kubectl</code> est\u00e1 configurado para acessar o cluster <code>projeto-cluster-fastapi</code>. Assim, voc\u00ea pode analisar o que est\u00e1 acontecendo no cluster, como os nodes, pods, deployments, etc, pelo terminal.</p> <p>Por exemplo, para listar os nodes do cluster, execute o comando:</p> <pre><code>kubectl get nodes\n</code></pre> <p>Para listar os pods, execute o comando:</p> <pre><code>kubectl get pods\n</code></pre> <p>Como ainda n\u00e3o h\u00e1 nenhum pod rodando, o comando acima n\u00e3o retornar\u00e1 nada.</p>"},{"location":"aws/#subindo-a-aplicacao-no-eks","title":"Subindo a aplica\u00e7\u00e3o no EKS:","text":"<ul> <li>Crie o arquivo <code>db-deployment.yaml</code> com o seguinte conte\u00fado:</li> </ul> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: postgres\n  template:\n    metadata:\n      labels:\n        app: postgres\n    spec:\n      containers:\n      - name: postgres\n        image: postgres:17\n        env:\n          - name: POSTGRES_USER\n            value: \"COLOQUE_SEU_USUARIO_AQUI\"\n          - name: POSTGRES_PASSWORD\n            value: \"COLORQUE_SUA_SENHA_AQUI\"\n          - name: POSTGRES_DB\n            value: \"COLORQUE_O_NOME_DO_BANCO_AQUI\"\n        ports:\n          - containerPort: 5432\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: postgres\nspec:\n  ports:\n    - port: 5432\n  selector:\n    app: postgres\n</code></pre> <ul> <li>Em seguida, execute o comando:</li> </ul> <pre><code>kubectl apply -f db-deployment.yaml\n</code></pre> <p>O comando acima ir\u00e1 criar um deployment e um service para o banco de dados PostgreSQL.</p> <ul> <li>Em seguida, crie o arquivo <code>fastapi-deployment.yaml</code> com o seguinte conte\u00fado:</li> </ul> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fastapi\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: fastapi\n  template:\n    metadata:\n      labels:\n        app: fastapi\n    spec:\n      containers:\n      - name: fastapi\n        image: lasr2/authapi:latest\n        env:\n          - name: DATABASE_URL\n            value: \"postgresql://SEU_USUARIO:SUA_SENHA@postgres:5432/SEU_BANCO\"\n          - name: SECRET_KEY\n            value: \"INSIRA_SUA_CHAVE_SECRETA_AQUI\"\n        ports:\n          - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: fastapi-service\nspec:\n  type: LoadBalancer\n  ports:\n    - port: 80\n      targetPort: 8080\n  selector:\n    app: fastapi\n</code></pre> <ul> <li>Em seguida, execute o comando:</li> </ul> <pre><code>kubectl apply -f fastapi-deployment.yaml\n</code></pre> <p>O comando acima ir\u00e1 criar um deployment e um service para a aplica\u00e7\u00e3o FastAPI.</p> <ul> <li>Para verificar se os pods est\u00e3o rodando, execute o comando:</li> </ul> <pre><code>kubectl get pods\n</code></pre> <p>A resposta seguir\u00e1 o modelo abaixo:</p> <pre><code>NAME                       READY   STATUS    RESTARTS   AGE\nfastapi-xxxxxxxxxx-xxxxx   1/1     Running   0          16s\npostgres-xxxxxxxxx-xxxxx   1/1     Running   0          2m58s\n</code></pre> <p>Por quest\u00e3o de privacidade, os nomes dos pods foram substitu\u00eddos por <code>xxxxxxxxxx-xxxxx</code>.</p> <p>Por fim, execute o comando:</p> <pre><code>kubectl get services\n</code></pre> <p>Caso tudo tenha funcionado, a resposta ser\u00e1:</p> <pre><code>NAME              TYPE           CLUSTER-IP       EXTERNAL-IP                                                              PORT(S)        AGE\nfastapi-service   LoadBalancer   10.100.xxx.xxx   a7fa69d196c014e0390429e20fdb0087-758149223.us-east-2.elb.amazonaws.com   80:30309/TCP   2m27s\nkubernetes        ClusterIP      10.100.xxx.xxx   &lt;none&gt;                                                                   443/TCP        23m\npostgres          ClusterIP      10.100.xxx.xxx   &lt;none&gt;                                                                   5432/TCP       5m9s\n</code></pre> <p>Use o endere\u00e7o <code>EXTERNAL-IP</code> para acessar a aplica\u00e7\u00e3o.</p>"},{"location":"aws/#endpoints-da-api","title":"Endpoints da API:","text":"<ul> <li>\u00c9 poss\u00edvel conferir o swagger da API acessando o endere\u00e7o  <code>http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/docs</code> ou clickando em swagger</li> </ul> <p>Os endpoints da API s\u00e3o os mesmos da aplica\u00e7\u00e3o rodando localmente. E podem ser utilizados atrav\u00e9s dos links:</p> <ul> <li>Post /registrar : </li> </ul> <p><code>http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/registrar</code></p> <pre><code>curl -X 'POST' \\\n  'http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/registrar' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"email\": \"luis@teste.com\",\n    \"nome\": \"luis teste\",\n    \"senha\": \"123\"\n  }'\n</code></pre> <ul> <li>Post /login : </li> </ul> <p><code>http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/login</code></p> <pre><code>curl -X POST http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"email\": \"luis@teste.com\",\n    \"senha\": \"123\"\n  }'\n</code></pre> <ul> <li>Get /consultar : </li> </ul> <p><code>http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/consultar</code></p> <pre><code>curl -X GET http://a94c4a09f48814d65bb093ad15476d61-563405062.us-east-2.elb.amazonaws.com/consultar \\\n  -H \"Authorization: Bearer SEU_TOKEN_JWT\"\n</code></pre> <p>Nota: Para obter o token JWT, \u00e9 necess\u00e1rio se registrar e/ou logar na aplica\u00e7\u00e3o. O token JWT \u00e9 retornado no corpo da resposta e tem dura\u00e7\u00e3o de 10 minutos.</p>"},{"location":"aws/#referencias","title":"Refer\u00eancias:","text":"<ul> <li> <p>Como criar um cluster EKS na AWS</p> </li> <li> <p>Documenta\u00e7\u00e3o do EKS</p> </li> <li> <p>Como criar cluster Kubernetes EKS na AWS com EKSCTL</p> </li> </ul>"}]}