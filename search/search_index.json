{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto Cloud - Documenta\u00e7\u00e3o parte 1","text":"<p>Autor: Lu\u00eds Rodrigues</p> <p>Link para o Reposit\u00f3rio no GitHub: Reposit\u00f3rio</p> <p>Link para o Docker Hub: Docker Hub</p>"},{"location":"#descricao-do-projeto","title":"Descri\u00e7\u00e3o do Projeto:","text":"<p>O projeto consiste em uma API RESTful desenvolvida em Python com o framework FastAPI. A API possui tr\u00eas endpoints, um para registrar um novo usu\u00e1rio, outro para autenticar um usu\u00e1rio e um terceiro para consultar uma API externa. A API utiliza um banco de dados PostgreSQL para armazenar os usu\u00e1rios cadastrados.</p> <p>A API realiza uma consulta, protocolo GET, em uma API externa JokeAPI e retorna uma piada sobre programa\u00e7\u00e3o, no formato, id: int, Pergunta: str, Resposta: str.</p> <p>Exemplo: curl -X GET \"https://official-joke-api.appspot.com/jokes/programming/random\"</p> <pre><code>[\n    {\n        \"id\": 15,\n        \"type\": \"programming\",\n        \"setup\": \"What's the best thing about a Boolean?\",\n        \"punchline\": \"Even if you're wrong, you're only off by a bit.\"\n    }\n]\n</code></pre> <p>O id representa o n\u00famero da piada catalogada pela API.</p> <p>Para realizar uma consulta na API \u00e9 necess\u00e1rio passar um token JWT no cabe\u00e7alho da requisi\u00e7\u00e3o, o token \u00e9 gerado ao registrar ou autenticar um usu\u00e1rio.</p>"},{"location":"#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do ambiente:","text":"<ul> <li> <p>Crie um diret\u00f3rio para organizar os arquivos do projeto, por exemplo: <code>mkdir projeto-cloud</code>. E acesse o diret\u00f3rio criado: <code>cd projeto-cloud</code></p> </li> <li> <p>Crie o <code>docker-compose.yml</code> com o seguinte conte\u00fado:</p> </li> </ul> <pre><code>services:\n  fastapi:\n    container_name: fastapi-api\n    image: lasr2/authapi:latest\n    ports:\n      - \"8080:8080\"\n    depends_on:\n      - db\n    environment:\n      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}\n      SECRET_KEY: \"${SECRET_KEY:-suaChaveSecreta}\"\n    restart: always\n\n\n  db:\n    image: postgres:17\n    container_name: postgres-database\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-projeto}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-projeto}\n      POSTGRES_DB: ${POSTGRES_DB:-projeto}\n</code></pre> <ul> <li>Crie o arquivo <code>.env</code> com o seguinte conte\u00fado, altere as vari\u00e1veis de acordo com o seu ambiente:</li> </ul> <pre><code>SECRET_KEY = \"chave_secreta_muito_forte\"\nPOSTGRES_DB=postgres\nPOSTGRES_USER=postgres\nPOSTGRES_PASSWORD=admin\n</code></pre> <ul> <li> <p>Abra o terminal e execute o comando <code>docker-compose up -d</code> para subir os containers</p> <p>Caso esteja funcionando corretamente, o terminal exibir\u00e1, no final, a mensagem:</p> </li> </ul> <pre><code>fastapi-api        | INFO:     Started server process [1]\nfastapi-api        | INFO:     Waiting for application startup.\nfastapi-api        | INFO:     Application startup complete.\nfastapi-api        | INFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)\n</code></pre> <ul> <li>Tente acessar o endere\u00e7o <code>http://localhost:8080/docs</code> para verificar se a API est\u00e1 funcionando.</li> </ul> <p>Nota Importante: Perceba que ao utilizar o docker-compose acima, ao utilizar o m\u00e9todo docker compose up, o docker ir\u00e1 baixar a imagem do reposit\u00f3rio do Docker Hub.</p> <p>Para utilizar novamente: Depois que o ambiente estiver configurados, basta entrar na pasta do projeto e executar o comando <code>docker-compose up -d</code> para subir os containers.</p>"},{"location":"#endpoints-da-api","title":"Endpoints da API:","text":"<ul> <li> <p>Post /registrar </p> <ul> <li>Cria um novo usu\u00e1rio</li> <li>Par\u00e2metros:<ul> <li><code>email</code>: E-mail do usu\u00e1rio</li> <li><code>nome</code>: Nome do usu\u00e1rio</li> <li><code>senha</code>: Senha do usu\u00e1rio</li> </ul> </li> <li>Retorno:<ul> <li><code>200</code>: Usu\u00e1rio criado com sucesso, retorna no body da resposta um token JWT  <code>json {     \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTJAZ21haWwiLCJub21lIjoiaHVtYmFzIiwiZXhwIjoxNzI5NzkzNDUzfQ.eKOBfLTVtSZ4wNKjAJ9XugFH8yBZACIlXH2Bvsvt8rY\" }</code></li> <li><code>409</code>: E-mail j\u00e1 cadastrado</li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X POST \"http://localhost:8080/registrar\"  -H \"Content-Type: application/json\"  -d '{\"email\": \"teste2@gmail\", \"senha\": \"123\",\"nome\":\"humbas\"}'</code></p> </li> </ul> </li> <li> <p>Post /login </p> <ul> <li>Autentica um usu\u00e1rio, recebe um e-mail e senha e retorna um token JWT</li> <li>Par\u00e2metros:<ul> <li><code>email</code>: E-mail do usu\u00e1rio</li> <li><code>senha</code>: Senha do usu\u00e1rio</li> </ul> </li> <li> <p>Retorno:</p> <ul> <li><code>200</code>: Usu\u00e1rio autenticado com sucesso, retorna no body da resposta um token JWT  <code>json {     \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTJAZ21haWwiLCJub21lIjoiaHVtYmFzIiwiZXhwIjoxNzI5NzkzNDUzfQ.eKOBfLTVtSZ4wNKjAJ9XugFH8yBZACIlXH2Bvsvt8rY\" }</code></li> <li><code>401</code>: Se o E-mail n\u00e3o estiver cadastrado ou a senha estiver incorreta</li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X POST \"http://localhost:8080/login\" -H \"Content-Type: application/json\" -d '{\"email\": \"teste@gmail\", \"senha\": \"123\"}'</code></p> </li> </ul> </li> <li> <p>Get /consultar </p> <ul> <li>Faz uma consulta em uma API externa, precisa de um token JWT para autentica\u00e7\u00e3o</li> <li>Cabe\u00e7alho:<ul> <li><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTNAZ21haWwiLCJub21lIjoiY2FydXNvIiwiZXhwIjoxNzI5ODAyMjgwfQ.ByDfIOOplaGl9akfW2kmk0uQZuXG2f-697pcN5c5-lY</code></li> </ul> </li> <li> <p>Retorno:</p> <ul> <li> <p><code>200</code>: Retorna um JSON com uma pergunta e resposta <code>json {     \"id\": 15,     \"Pergunta\": \"What's the best thing about a Boolean?\",     \"Resposta\": \"Even if you're wrong, you're only off by a bit.\" }</code></p> </li> <li> <p><code>403</code>: Token inv\u00e1lido ou expirado</p> </li> </ul> </li> <li> <p>Exemplo de Chamada:</p> <p><code>bash curl -X GET \"http://localhost:8080/consultar\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0ZTNAZ21haWwiLCJub21lIjoiY2FydXNvIiwiZXhwIjoxNzI5ODAyMjgwfQ.ByDfIOOplaGl9akfW2kmk0uQZuXG2f-697pcN5c5-lY\"</code></p> </li> </ul> </li> </ul> <p>Nota Importante: \u00c9 poss\u00edvel visualizar as informa\u00e7\u00f5es do JWT contidas em jwt.io</p>"},{"location":"#video-de-demonstracao","title":"V\u00eddeo de Demonstra\u00e7\u00e3o:","text":"<p>Link para o v\u00eddeo de demonstra\u00e7\u00e3o: V\u00eddeo</p>"}]}